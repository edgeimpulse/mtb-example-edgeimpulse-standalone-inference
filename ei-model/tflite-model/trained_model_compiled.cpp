/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 19.12.2022 12:09:38

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 9040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038449754938483238, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[8] = { -657, -6315, -460, -30268, -2571, -4080, -294, -1307, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 5.1539500418584794e-05, 6.6412598243914545e-05, 0.00014286494115367532, 3.7158646591706201e-05, 3.3801898098317906e-05, 5.3958799981046468e-05, 9.8858261480927467e-05, 0.00014634845138061792, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 137, 277, -4, -664, -416, -237, -297, -38, -170, -455, -132, -1003, -12, -487, -891, -21, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00096942688105627894, 0.0003398434491828084, 0.0010172345209866762, 0.0011314842849969864, 0.00077369442442432046, 0.00048458369565196335, 0.00075212353840470314, 0.00052507041255012155, 0.00089513580314815044, 0.0006304775015451014, 0.00090725620975717902, 0.0011515694204717875, 0.0013311160728335381, 0.00063811457948759198, 0.00056639779359102249, 0.00082716171164065599, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[4] = { 3023, -1236, -1080, -218, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00069445697590708733, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[4*400] = { 
  -127, -8, 4, -23, -21, 13, 1, 5, 3, 17, -4, 1, 3, 9, 7, 8, -32, -11, 22, -6, 2, -14, -5, -2, -35, 11, 3, -20, 9, -28, 8, 11, -48, -8, 8, -11, -16, -21, 2, 10, -28, 4, -3, 3, 5, -40, 7, 7, -40, 0, -5, -6, -16, -24, 11, 11, -13, 5, -6, 0, 3, -30, 5, 14, -27, -2, 10, -22, -22, -7, 15, 1, -20, 4, -2, -12, 15, -36, -1, 6, -15, 2, -10, -28, -1, -19, 12, -2, -33, -2, 4, -5, 5, -36, -5, -9, -18, 1, -3, -16, -47, 0, 15, 8, -36, 0, 0, 9, 6, -35, 4, -13, -28, 4, -10, -23, -12, -17, 10, -2, -30, 5, 2, -8, 14, -34, 3, 0, 6, 0, -3, -17, -30, -7, 16, -4, 0, 2, -12, 13, 11, -17, -9, -7, 1, 11, 2, -23, -34, -11, 13, -11, -40, -2, 1, 1, 7, -39, 3, -10, 14, 0, -8, -23, -60, -40, 15, -17, -24, 2, 3, 3, 15, -25, 4, -9, 3, -3, -11, -31, -58, -22, 9, -15, -27, 2, -4, -4, 11, -37, -1, 3, 9, 12, -11, -21, -39, -16, 18, -4, -31, 8, -1, -3, 12, -33, -4, 5, 2, 6, -14, -3, -70, -37, 8, -18, -9, 4, 0, -6, 7, -26, -6, 2, -28, 1, -12, -14, -48, -41, 10, -5, -34, 7, 2, -1, 2, -27, -2, -3, 7, -2, -5, -12, -61, -36, 11, -4, -19, 0, -15, -5, 5, -19, 6, 0, 1, -1, -14, -23, -11, -6, 10, 6, -26, 8, 0, -1, 12, -22, 3, -5, -5, -3, -17, -14, -54, -35, 24, 1, -20, 3, -5, -13, 17, -18, -2, -9, 1, 3, -10, -19, -27, -23, 18, 8, -23, 8, -10, -3, 13, -16, 0, -1, -14, -9, -18, -52, -65, -11, 20, 8, -6, 4, 4, -24, 4, -39, 4, -9, -23, 1, -17, -12, -32, -9, 15, -16, -21, 2, -4, 3, 7, -20, 0, -8, -32, -8, -7, -32, -58, -2, 18, 2, -24, -4, -7, -2, 9, -31, 11, -6, -45, -6, -5, -6, -65, 8, 14, 26, -25, 16, -2, -22, 27, -42, -10, -1, -35, -14, -13, -22, -26, 4, 15, 25, -34, 8, 19, 4, 13, -24, 12, -5, -34, -18, 3, 3, -18, 19, 9, -2, -28, 21, 9, 7, 9, -46, -2, 4, 
  23, -16, -10, -3, 15, -2, -5, 3, 2, -12, 3, -10, -9, 1, -17, -4, 8, -20, -17, 7, 4, 13, -1, 3, 6, -7, -36, 10, -16, 9, -8, 21, 7, -15, -9, 15, 4, -8, -4, 1, 5, 1, -9, -7, -29, 5, 12, 33, 11, -19, -21, 21, 9, 0, 10, 2, 9, -2, -7, -41, -14, 8, 5, 8, 18, -18, -16, 3, 7, 7, 7, 5, 6, -9, 3, -2, -12, 7, 4, 3, 3, -5, -4, 16, 3, -3, 3, 8, 10, -3, -24, -8, -12, 8, 6, 1, 6, -4, -26, 12, 7, -1, -1, 5, 7, 9, -16, -28, -7, 3, 13, -2, 10, -2, -24, 3, 6, -3, -11, 10, 9, -1, -19, -12, -11, 5, 15, -15, -10, 1, -20, 5, 10, -6, -2, 5, 5, -15, -1, -16, -18, 3, 16, -32, -6, 6, -38, 4, 4, 3, 4, 11, 7, 5, -16, -35, -6, 5, 17, -20, -18, 20, -24, 7, 8, 9, 4, 6, 8, -4, -17, -13, -26, 8, 8, -11, -16, 16, -32, 11, 6, 4, -5, 12, 10, 5, -8, -6, -17, 3, 11, -44, -9, 15, -36, 5, 11, 5, -8, 8, 10, -5, -1, -24, -28, 3, 10, -56, -17, 13, -29, 14, 4, 5, 8, 10, 5, -2, -16, -3, -16, 4, 10, -39, 12, 19, -15, 2, 4, 6, -1, 7, 5, 0, -18, -20, -5, 1, 13, -13, 0, 13, -22, 7, 14, 2, 1, 6, 2, -3, 10, 6, -20, 6, 10, -32, 0, 17, -12, 11, -1, -2, 1, 5, 5, -12, -18, -10, -17, 0, 8, -13, -4, 14, -36, 6, 21, 4, 2, 0, 0, -16, -5, 5, -30, 4, 10, -24, -4, 15, -33, 11, 11, 1, -6, 7, 7, -18, 14, -1, -17, 2, 12, -19, -11, 12, -6, 12, 13, -10, 3, 4, 6, -27, -4, -17, -16, -2, 12, -21, 2, 13, -17, 10, 3, -10, 11, 4, 6, -6, 18, -13, -14, -3, 4, -29, -4, 12, -16, 13, 7, -12, 3, -6, -4, 2, 17, -37, -30, 5, 13, -20, -4, 14, -24, 7, 7, -15, -3, 10, 9, -21, 5, -17, -29, 11, 7, -21, 0, 10, -19, 20, 17, 2, 1, -2, 5, -12, -14, -26, -19, 16, 7, -8, 1, -5, -7, 1, 22, -19, -3, -47, -6, -5, -1, -14, -4, 8, 1, -1, 
  3, 3, 3, 13, 11, -17, -2, -2, 2, -20, -10, -13, 1, 1, 2, -8, -8, 21, -8, -3, 5, 13, -3, 8, 5, -13, 0, -14, 0, 0, -10, -9, 14, 7, -14, -6, 5, 8, 12, 2, 5, -11, -21, -42, 9, 5, -12, -17, 11, 11, 0, -11, 12, 6, -20, 1, 3, -8, -16, -9, 0, 9, -12, -11, 2, 24, -21, -19, 4, 2, 4, 1, 7, -10, -19, -23, -17, 10, -12, -14, -5, 3, 3, -6, -3, 7, -11, 7, 9, -7, -14, -25, -6, 6, -26, 6, 9, 2, 11, -11, 9, 2, 2, 7, 10, -30, -23, -49, -5, 4, -21, 10, 9, 4, 20, -6, 7, 8, 4, 7, 7, -8, -15, -24, -25, 5, -17, 6, 0, 2, 13, -10, 5, 0, -20, 7, 2, -18, -28, -35, -13, 2, -15, 16, 1, -23, 13, -9, 8, 10, -13, 10, 8, -29, -15, -41, -19, 5, -25, 12, 1, -23, 11, -17, 8, 12, -1, 8, 6, -13, -32, -25, -19, 7, -28, 10, 9, -24, 10, -8, 11, 12, -4, 11, 4, -24, -21, -25, -22, 6, -15, 15, -10, -21, 19, -6, 10, 13, -11, 8, 13, -9, -25, -3, -8, 2, -12, 18, 4, -36, 12, -18, 8, 9, -11, 2, 3, -20, -26, -18, -8, 3, -10, 12, 5, -31, 12, -6, 6, 11, 0, 9, 6, -24, -13, -28, -6, 5, -20, 9, -1, -21, 7, -13, 5, 8, -3, 6, 3, -7, -18, -45, -11, 1, -26, 8, 1, -15, 12, -3, 12, 0, -17, 3, 8, -10, -4, -20, -15, 5, -19, 11, 0, -19, 12, -8, 4, 14, -21, -4, 3, -11, -18, -4, -19, 8, -17, 13, -4, -9, 15, -10, 7, 1, -3, -3, 5, -18, -12, -10, -14, 6, -12, 8, 15, -9, 9, 4, 13, 6, -11, -9, -2, -2, -15, 6, -8, 8, -24, 12, 9, -9, 14, -6, 30, 7, -8, 8, 5, -4, -14, -6, -2, 9, -8, 16, 9, -10, 12, -2, 22, 10, 5, -2, 13, -13, -13, -6, 0, 7, -31, 7, 12, -12, 19, -16, 12, 0, -13, -20, -2, 6, -17, 7, -15, 5, -11, 9, 12, 0, 16, -55, 21, -9, 0, -3, 28, 7, -1, -5, -6, -7, -28, 9, 5, 5, 4, 0, -9, -6, 4, -1, -28, -46, -19, 4, -8, 5, -18, -6, 
  42, 11, -1, 7, -46, -11, -6, -20, -14, -2, 3, 0, -9, -22, -4, -3, 23, 4, -13, -8, -28, -21, -4, -19, -5, -3, 9, 11, -6, 3, -9, -21, 9, 4, 0, 3, -21, 4, -6, -27, -17, -4, 10, 17, -9, 0, -12, -24, 9, 10, 15, 0, -25, 6, -13, -18, -26, -2, 5, 10, 1, -8, -8, -10, 0, 2, 11, 25, -9, -1, -27, -11, -23, 12, 8, 4, 5, -3, 4, -2, 13, 5, 7, 10, -18, 6, -10, -25, -14, 7, 6, 14, 1, -6, 10, -2, -2, -7, 7, 7, -13, 1, -15, -17, -18, 10, 12, 14, -3, -6, 3, 2, -5, 0, 10, 12, -13, 5, -6, -18, -21, 4, 10, 16, 10, -6, -3, 0, 7, 4, 5, 12, -16, -1, -1, -15, -13, 9, 19, 11, 1, -3, -2, 5, 0, 3, 2, 13, -14, 3, -8, -18, -15, 9, 10, 26, 3, 1, 5, 3, 5, -6, 6, 15, -19, -1, -12, -16, -15, 9, 17, 12, 3, 3, 8, -1, 7, 4, 7, 8, -11, 4, -7, -20, -15, 8, 14, 14, 8, 2, 1, 9, 10, -6, 10, 8, -23, -4, 3, -16, -13, 5, 12, 8, 9, 0, 7, 3, 3, -1, 7, 6, -17, 6, -1, -13, -11, 7, 16, 16, 6, -6, 1, 1, -1, -7, 2, 10, -10, 3, 0, -13, -6, 11, 10, 16, -3, -5, 5, -1, -2, 2, 4, 9, -16, 0, -9, -14, -16, 4, 12, 6, 6, 1, 7, 3, 1, -3, 0, 9, -10, 6, -4, -6, -1, 3, 14, 2, 10, -6, 8, 2, 11, -6, 9, 9, -7, 8, -8, -2, -5, 8, 6, 6, 11, 1, 9, 6, 9, -7, 12, 0, -11, 3, -5, -18, 0, 10, 7, 4, 10, 6, 3, 1, 1, 3, 4, 8, -37, 3, -9, -19, -19, 17, 2, 16, -2, 8, 4, 1, -8, -3, 1, 7, -47, -1, -14, -6, -9, -2, 1, -1, 4, 7, 0, 4, 14, -4, -4, 9, -30, -6, -16, -5, 5, 5, -5, 12, 4, 5, -1, 4, 11, -4, -1, 8, -24, -12, -3, -29, -6, 0, -6, 16, -3, 3, 2, 0, 4, -2, 3, 21, -55, -13, -15, -44, -23, -5, -14, 6, -2, 0, -7, -4, 10, 12, -1, 0, -21, -7, -8, 25, 28, -5, -5, -18, -7, 8, -4, -4, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,400 } };
const TfArray<1, float> quant5_scale = { 1, { 0.031367108225822449, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -35,47,31,20,21,15,30,34,-42,-16,-10,44,95,14,13,-54,-84,23,-5,21,5,28,41,60,73,-23,-34,13,32,-2,24,-42,1,49,88,51,3,18,31,38, -8,13,21,-13,-7,73,39,16,31,-4,12,-45,-25,-9,-98,-44,-67,-118,-46,52,20,8,18,31,-17,-56,21,17,56,16,6,-7,25,18,45,-45,-4,23,-24,-16, 57,14,19,45,49,113,32,25,26,-46,-45,-127,-77,-73,-74,-49,-44,34,73,-13,13,-54,-58,-88,-51,-50,-68,-70,13,11,13,0,28,8,-45,-96,-58,-72,-86,-109, 
  /* [1][0][][] */ -1,-21,-25,-5,5,22,26,14,30,-11,-16,-35,-24,-8,-1,-21,-22,-50,-20,-12,-79,-127,-59,-45,-20,-68,-48,-23,-24,-36,-8,3,13,17,-12,8,54,33,33,38, -2,11,8,19,9,15,51,35,63,26,16,-18,-3,-10,-13,-26,-35,12,-15,-30,6,-9,-10,-9,6,-3,22,8,2,4,-20,11,13,17,1,19,-12,-5,-13,25, -77,-22,-19,15,10,21,58,49,63,49,40,0,-9,13,-19,21,-31,-45,-16,-55,-4,-8,19,57,38,23,32,-1,29,4,-9,31,61,30,-17,-20,-11,-28,-27,-34, 
  /* [2][0][][] */ -5,-25,-24,-30,-40,-6,-7,2,-24,19,21,8,17,-36,-17,23,-3,13,-8,7,-65,-70,-41,-79,-50,-127,-15,22,-48,14,28,23,22,6,17,-39,-7,-23,-33,-54, 19,-12,-11,-5,-10,-9,-18,-20,-13,-18,-11,0,19,-9,3,-6,-3,-5,8,24,-8,24,23,19,30,14,6,-5,-11,-25,8,4,-1,-5,16,-16,1,1,11,7, 10,-9,0,-3,1,-2,-11,-13,-12,8,14,7,33,2,39,19,0,40,16,29,6,2,-7,-39,-25,-25,-25,-23,-18,-21,1,-23,-7,7,7,-15,18,-2,17,-4, 
  /* [3][0][][] */ 23,-2,-26,-6,-6,-108,-41,-26,-68,-29,-31,-12,-13,54,11,51,-21,61,53,53,29,25,38,-44,12,-61,-97,-42,-99,-72,-46,-9,-28,-1,-2,-21,3,1,-49,-84, 9,38,40,-21,10,-65,-17,-28,-42,-9,-45,23,38,89,11,49,33,68,75,117,18,34,25,27,20,-9,-49,-37,-43,-48,-40,-18,-37,33,16,2,48,53,40,-11, 64,92,127,49,72,-63,13,5,-28,-27,-15,85,60,56,60,27,84,93,52,112,17,20,-40,-53,-73,-30,-91,-21,-66,-40,-57,-93,-65,-20,-3,22,67,82,26,-6, 
  /* [4][0][][] */ -40,-102,-127,-75,-65,-105,-50,-52,-41,-56,-53,-28,-28,-25,-109,-51,-56,-84,-69,-54,-52,-92,-15,-64,-25,-10,-46,-127,-26,-24,-57,-110,-107,-126,-73,-65,-22,-23,-33,-21, 58,96,77,19,34,37,-20,-13,43,16,23,26,54,-23,20,75,48,2,4,-21,-3,11,34,-4,19,1,-39,8,26,105,9,43,16,36,42,-3,27,24,72,57, -18,44,72,59,64,72,74,84,-53,15,22,41,101,36,19,-11,74,23,76,127,54,34,45,-30,62,-79,-41,10,13,59,0,0,18,8,-6,36,30,-14,49,30, 
  /* [5][0][][] */ -9,46,47,35,33,57,61,60,75,33,45,53,57,56,30,50,28,46,20,-6,31,56,18,20,34,47,27,-12,1,-4,20,69,71,41,-4,8,17,9,-6,8, 11,1,-2,24,9,31,14,17,5,16,-2,10,3,19,-10,6,23,25,28,-25,6,-3,26,-4,20,15,-9,-9,-81,-59,-1,46,52,-5,-10,15,4,7,-22,1, -15,-31,-38,-94,-80,-85,-56,-53,-16,-37,-26,-21,-48,-16,-30,-28,-25,-25,-12,14,-21,-34,-2,-31,-32,-15,-31,-51,-70,-127,-75,-13,3,-37,-25,-51,-59,-54,-48,-20, 
  /* [6][0][][] */ -69,-90,-93,-123,-118,-127,-104,-109,-66,28,18,-28,-33,-33,108,20,45,51,40,10,21,23,-24,-28,-12,-27,-37,-21,23,-11,16,-21,36,22,8,19,0,7,9,38, 37,-11,-8,-3,-9,21,26,22,-59,-47,-44,-18,-39,-44,-41,6,-31,-22,-29,-15,-16,-18,14,19,-19,-14,25,13,3,8,-16,2,17,2,7,-3,-28,32,18,21, 46,40,37,44,45,39,43,39,44,29,25,49,-73,-94,-65,-27,-49,7,-26,-45,-2,13,-10,32,-2,41,-5,21,46,-23,-5,-16,9,1,-14,14,-31,-28,-19,-26, 
  /* [7][0][][] */ -19,11,13,11,10,-17,16,20,-32,7,0,-9,-6,30,-6,9,15,-22,-7,5,-12,0,-7,21,35,5,21,20,-18,-16,-13,21,-4,-18,16,18,10,-18,-30,-37, -15,25,24,25,17,-7,7,7,-21,-16,-17,-35,-1,14,-3,-16,30,-5,-26,-42,-49,-45,-39,-21,17,15,7,29,-5,0,-6,9,5,10,26,20,-4,-7,-18,-38, -10,14,15,14,18,-20,-1,0,-3,-14,-20,-51,-16,-31,-6,1,0,-20,3,-127,-56,-68,-61,-39,-2,11,-8,41,-18,0,-6,19,1,16,29,9,-13,-24,5,-14, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.013404376804828644, 0.017272567376494408, 0.037156268954277039, 0.0096642086282372475, 0.0087911868467926979, 0.014033587649464607, 0.025711024180054665, 0.038062259554862976, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -9,-27,-64,-36,-89,-3,-115,45, -8,-78,-34,-43,-118,-17,-127,-2, -21,-70,-8,-5,-20,-24,-105,24, 
  /* [1][0][][] */ -127,-32,36,2,-53,10,19,-64, -63,-10,-116,-29,-91,-27,11,15, -50,-45,-50,-66,-8,-56,58,18, 
  /* [2][0][][] */ -8,-33,-56,-4,-78,1,-127,6, 23,-10,-75,-28,-74,-2,-123,2, 6,8,-68,-49,-59,9,-31,26, 
  /* [3][0][][] */ 4,-13,-61,1,-30,0,-127,-1, -8,-2,0,-3,-13,25,-73,-18, -10,-70,7,-1,-22,1,-18,-15, 
  /* [4][0][][] */ -25,-64,20,-57,3,-103,-18,7, -97,-20,-1,-20,5,-92,-16,19, -127,-4,0,29,0,-15,-21,23, 
  /* [5][0][][] */ -19,11,-46,34,-2,-17,-21,124, -85,-112,-127,-7,16,-46,-83,-103, -88,-78,-54,-17,-14,-53,-67,-22, 
  /* [6][0][][] */ -21,-13,23,-13,18,-29,-8,-114, 36,-35,-5,-61,-46,-2,29,-127, 0,-94,4,-91,-34,0,-2,-78, 
  /* [7][0][][] */ -113,-127,4,-7,1,-26,-106,-72, -121,-33,-18,-1,20,-6,-97,-8, -107,-27,44,8,-1,-4,-25,-75, 
  /* [8][0][][] */ -71,-41,43,-6,-7,-73,-42,-5, -120,-1,-1,3,5,-24,-9,-14, -127,1,23,4,2,-12,0,-28, 
  /* [9][0][][] */ -15,-19,-79,-32,4,-6,-17,-24, -28,53,-2,6,-6,-3,-12,-32, 7,6,-127,-12,0,-6,18,-1, 
  /* [10][0][][] */ -14,-39,-47,-127,9,-122,-5,0, -3,-26,-57,-52,9,-118,8,3, 14,24,-47,-27,3,-100,4,18, 
  /* [11][0][][] */ 4,0,-43,-16,6,-46,29,25, 5,19,-127,-14,3,-47,3,-2, -7,3,-53,-3,8,-27,-85,-7, 
  /* [12][0][][] */ -1,-4,-57,-48,-1,2,-5,-127, -19,3,-20,-26,10,-5,-5,-29, -4,3,-20,-118,-55,9,1,-31, 
  /* [13][0][][] */ -9,13,19,26,-2,8,0,49, -9,3,61,-6,-2,1,-5,-5, -37,-2,-7,-2,-5,-7,-127,53, 
  /* [14][0][][] */ -20,19,-6,5,-54,47,-63,-64, -24,-5,6,-11,-27,-9,11,-31, -121,-10,8,-15,-7,-34,48,-127, 
  /* [15][0][][] */ 17,1,-5,-2,-61,0,-127,19, -19,4,-8,-1,-38,0,-84,-20, 34,-10,-2,-1,-45,-4,-84,-20, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.020995920524001122, 0.0073603549972176552, 0.02203134261071682, 0.024505771696567535, 0.016756732016801834, 0.010495150461792946, 0.016289548948407173, 0.011372014880180359, 0.019386919215321541, 0.013654929585754871, 0.019649423658847809, 0.024940777570009232, 0.028829412534832954, 0.013820333406329155, 0.012267086654901505, 0.017914731055498123, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data9[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0038449754938483238, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.046172153204679489, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.046172153204679489, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.046172153204679489, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.046172153204679489, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0221396554261446, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0221396554261446, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0221396554261446, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0221396554261446, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.15179230272769928, } };
const TfArray<1, int> quant21_zero = { 1, { 61 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
